name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  BACKEND_SERVICE_NAME: resume-agent-backend
  FRONTEND_SERVICE_NAME: resume-agent-frontend
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
        
    - name: Build and push backend image
      run: |
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/resume-agent/$BACKEND_SERVICE_NAME:${{ github.sha }} ./Backend
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/resume-agent/$BACKEND_SERVICE_NAME:${{ github.sha }}
        
    - name: Deploy backend to Cloud Run
      id: deploy-backend
      uses: google-github-actions/deploy-cloudrun@v1
      with:
        service: ${{ env.BACKEND_SERVICE_NAME }}
        region: ${{ env.REGION }}
        image: ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/resume-agent/${{ env.BACKEND_SERVICE_NAME }}:${{ github.sha }}
        env_vars: |
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
        
    - name: Build simple test frontend image
      run: |
        # Clean up any existing container with the same name
        docker stop frontend-test || true
        docker rm frontend-test || true
        
        # Build the frontend image
        cd Frontend/job_assistant
        docker build -t frontend-test .
        
        # Run the container locally to test
        docker run -d --name frontend-test -p 8080:8080 -e PORT=8080 -e BACKEND_URL=${{ steps.deploy-backend.outputs.url }} frontend-test
        
        # Wait for the container to start
        sleep 5
        
        # Check if the container is running
        docker ps | grep frontend-test
        
        # Check the logs to see if it started correctly
        docker logs frontend-test
        
        # Stop and remove the test container
        docker stop frontend-test
        docker rm frontend-test
        
        # Tag and push the image
        docker tag frontend-test ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/resume-agent/$FRONTEND_SERVICE_NAME:${{ github.sha }}
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/resume-agent/$FRONTEND_SERVICE_NAME:${{ github.sha }}
        
    - name: Deploy frontend to Cloud Run with extended timeout
      run: |
        gcloud run deploy ${{ env.FRONTEND_SERVICE_NAME }} \
          --image=${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/resume-agent/${{ env.FRONTEND_SERVICE_NAME }}:${{ github.sha }} \
          --region=${{ env.REGION }} \
          --platform=managed \
          --port=8080 \
          --set-env-vars=BACKEND_URL=${{ steps.deploy-backend.outputs.url }},PORT=8080 \
          --allow-unauthenticated \
          --cpu=1 \
          --memory=512Mi \
          --timeout=300 \
          --min-instances=0 \
          --max-instances=1 \
          --cpu-throttling
        
    - name: Show URLs
      run: |
        echo "Backend URL: ${{ steps.deploy-backend.outputs.url }}"
        FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.url)")
        echo "Frontend URL: $FRONTEND_URL" 